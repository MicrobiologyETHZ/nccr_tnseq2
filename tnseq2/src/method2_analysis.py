import collections
import pandas as pd
import plotnine as p9
from pathlib import Path
import datetime as dt
from tnseq2.src.analysis import run_command
from scipy import stats
from scipy.stats import ranksums
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import math
import subprocess
from scipy.stats import norm
import statsmodels
import scipy
from datetime import date


def run_VST_transformation(df, name, outdir, sample_id='sampleID',
                           sample_data_columns=('mouse', 'day', 'tissue', 'dnaid', 'experiment'),
                           count_column='cnt', barcode_column='barcode'):
    name = f'{dt.date.today().strftime("%Y-%m-%d")}_{name}'
    print('Generating datasets for DESeq2')
    sample_data_columns = list(sample_data_columns) + [sample_id]
    sdf = df[sample_data_columns].set_index(sample_id).drop_duplicates()
    edf = (df[[barcode_column, count_column] + sample_data_columns].drop_duplicates()
           .pivot(index=barcode_column, columns=sample_id, values=count_column))
    edf = edf.fillna(0)
    edf = edf[list(sdf.index)].reset_index()

    sdf_path = Path(outdir) / f"{name}_sdf.csv"
    edf_path = Path(outdir) / f"{name}_edf.csv"
    sdf.to_csv(sdf_path)
    edf.set_index(barcode_column).to_csv(edf_path)
    rpath = Path(__file__).parent.absolute()
    #rpath = Path('/Users/ansintsova/git_repos/tnseq2.0/tnseq2/src')
    print("Running DESeq2 VST Transformation")
    r = run_command(['Rscript', rpath / 'method2_deseq.R', sdf_path, edf_path])
    print("Done")
    vst = pd.read_csv(Path(outdir) / f'{name}_vst.csv').rename({'Unnamed: 0': barcode_column}, axis=1)
    return vst


def gene_ranksums(gene_values, wt_values):
    return ranksums(gene_values, wt_values)[1]


def fdr_correction(pvals):
    return statsmodels.stats.multitest.multipletests(pvals, alpha=0.05, method='fdr_bh')[1]


def get_median_for_gene_on_a_day(df, annotation, day, merge_on='barcode', grp_by='ShortName'):
    df = df.merge(annotation, on=merge_on)
    samples = dict.fromkeys(([c for c in df.columns if day in c]), ['median'])
    day_median_value = df.groupby(grp_by).agg(samples)
    day_median_value.columns = [c[0] for c in day_median_value.columns]
    return day_median_value


def get_barcode_fitness(cnts, annotation):
    # Calculate a mean value for all inoculum samples
    cnts['inoculum'] = cnts[[c for c in cnts.columns if 'd0' in c]].mean(axis=1)
    cnts = cnts.dropna(subset=['inoculum'])  # do I have any NAs?
    cnts = cnts[cnts.inoculum > 0]
    # Caclucalte fitness for each barcode
    fitness = cnts.apply(lambda x: 2 ** x / 2 ** cnts['inoculum']).reset_index()
    # Add gene annotation
    fitness = fitness.merge(annotation, on='barcode')
    # Calculate fitness for each gene
    # Drop controls for now
    return fitness


def get_wt_fitness(barcode_fitness, day, good_samples):
    # Calculate median fitness for wt barcodes
    wt_fitness = barcode_fitness[barcode_fitness.phenotype == 'wt'][[c for c in good_samples if day in c]].median()
    ssa_fitness = barcode_fitness[barcode_fitness.phenotype == 'ssaV_invG'][
        [c for c in good_samples if day in c]].median()
    controls = pd.concat([wt_fitness, ssa_fitness], axis=1)
    controls.columns = ['wt', 'ssaV_invG']
    controls['day'] = day.strip('_')
    return controls


def get_gene_fitness(fitness, day, good_samples):
    """
    fitness: barcode_fitness generated by get_barcode_fitness

    """
    # Drop control barcodes
    gene_df = fitness[fitness.phenotype.isna()]
    # Calculate median value for each ShortName
    samples = dict.fromkeys(([c for c in good_samples if day in c]), ['median'])
    if not samples:
        print(f"No samples for {day} found")
        return pd.DataFrame()

    day_fitness = gene_df.groupby('ShortName').agg(samples)
    day_fitness.columns = [c[0] for c in day_fitness.columns]
    return day_fitness


def get_results(day_fitness, controls, day, good_samples, hits=0.01):
    wt_fitness = controls.wt
    ssa_fitness = controls.ssaV_invG

    # Calculate ranksums test for wt vs each gene, multi-test correction using Benjamini/Hochberg (non-negative)
    pvals = day_fitness.apply(gene_ranksums, axis=1, wt_values=wt_fitness)
    padj = fdr_correction(pvals.values)
    results = pd.DataFrame([pvals.values, padj], columns=pvals.index, index=['pval', 'padj']).T

    # Calculate CI
    day_ci = day_fitness.apply(lambda x: x / wt_fitness[x.name])

    ssa_ci = ssa_fitness / wt_fitness

    pvals_ci = day_ci.apply(gene_ranksums, axis=1, wt_values=ssa_ci)
    ci_res = pd.DataFrame([pvals_ci.values, fdr_correction(pvals_ci.values)], columns=pvals.index,
                          index=['ci_pval', 'ci_padj']).T
    results = results.merge(ci_res, left_index=True, right_index=True)
    # Calculate median and mean fitness and median and mean CI
    results['median_fitness'] = day_fitness.median(axis=1)
    results['mean_fitness'] = day_fitness.mean(axis=1)
    results['median_CI'] = day_ci.median(axis=1)
    results['mean_CI'] = day_ci.mean(axis=1)
    ssa_ci = pd.DataFrame(ssa_ci, columns=['ssaV_invG_CI']).assign(day=day.strip("_"))
    ssa_ci = ssa_ci.merge(controls, on=['day'], left_index=True, right_index=True)
    results['hits'] = results['padj'] < hits
    results['ci_hits'] = results['ci_padj'] < hits
    return day_ci, results, ssa_ci


def method2_analysis2(vst, annotation_df, good_samples, sample_id='sampleID',
                      days=['_d1', '_d2', '_d3', '_d4'], hits=0.05):
    gene_fitness_dfs = []
    ci_dfs = []
    results_dfs = []
    control_dfs = []
    barcode_fitness = get_barcode_fitness(vst, annotation_df, good_samples)
    for day in days:
        print(day)
        controls = get_wt_fitness(barcode_fitness, day, good_samples)
        gene_fitness = get_gene_fitness(barcode_fitness, day, good_samples)
        gene_ci, results, controls = get_results(gene_fitness, controls, day, good_samples, hits=hits)

        if all([d.empty for d in [gene_fitness, gene_ci, results, controls]]):
            continue
        df = gene_fitness.reset_index().melt(id_vars=['ShortName'], var_name=sample_id, value_name='Fitness')
        df['day'] = day.strip('_')
        gene_fitness_dfs.append(df)
        df2 = gene_ci.reset_index().melt(id_vars=['ShortName'], var_name=sample_id, value_name='CI')
        df2['day'] = day.strip('_')
        ci_dfs.append(df2)
        results['day'] = day.strip("_")
        results_dfs.append(results)
        control_dfs.append(controls)

    gene_fitness_df = pd.concat(gene_fitness_dfs)
    ci_df = pd.concat(ci_dfs)
    results_df = pd.concat(results_dfs)
    control_df = pd.concat(control_dfs)
    return barcode_fitness, gene_fitness_df, ci_df, results_df, control_df
